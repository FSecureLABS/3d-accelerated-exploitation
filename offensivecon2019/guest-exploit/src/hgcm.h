#ifndef HGCM_H
#define HGCM_H

/* mostly stolen from https://github.com/niklasb/3dpwn/blob/master/lib/hgcm.py :) */

#include <stdint.h>

// define IN_VM or OUT_VM. this is necessary for handling pointers
#define IN_VM


#define IOCTL_HGCM_CONNECT          4
#define IOCTL_HGCM_DISCONNECT       5
#define IOCTL_HGCM_CALL             7

#define VBGLREQHDR_VERSION              0x10001
#define VBGLREQHDR_TYPE_DEFAULT         0x00

#define VMMDevHGCMLoc_LocalHost_Existing    2

#define VBGL_IOCTL_CODE_SIZE(func, size) (0xc0005600 + (size<<16) + func)

typedef struct VBGLREQHDR
{
    /** IN: The request input size, and output size if cbOut is zero.
     * @sa VMMDevRequestHeader::size  */
    uint32_t        cbIn;
    /** IN: Structure version (VBGLREQHDR_VERSION)
     * @sa VMMDevRequestHeader::version */
    uint32_t        uVersion;
    /** IN: The VMMDev request type, set to VBGLREQHDR_TYPE_DEFAULT unless this is a
     * kind of VMMDev request.
     * @sa VMMDevRequestType, VMMDevRequestHeader::requestType */
    uint32_t        uType;
    /** OUT: The VBox status code of the operation, out direction only. */
    int32_t         rc;
    /** IN: The output size.  This is optional - set to zero to use cbIn as the
     * output size. */
    uint32_t        cbOut;
    /** Reserved, MBZ. */
    uint32_t        uReserved;
} VBGLREQHDR;

/* crOpenGL guest functions */
#define SHCRGL_GUEST_FN_WRITE				(2)
#define SHCRGL_GUEST_FN_READ				(3)
#define SHCRGL_GUEST_FN_WRITE_READ			(4)
#define SHCRGL_GUEST_FN_SET_VERSION			(6)
#define SHCRGL_GUEST_FN_INJECT				(9)
#define SHCRGL_GUEST_FN_SET_PID				(12)
#define SHCRGL_GUEST_FN_WRITE_BUFFER        (13)
#define SHCRGL_GUEST_FN_WRITE_READ_BUFFERED (14)
#define SHCRGL_GUEST_FN_GET_CAPS_LEGACY     (15)
#define SHCRGL_GUEST_FN_GET_CAPS_NEW		(16)

/* Parameters count */
#define SHCRGL_CPARMS_SET_CONSOLE (1)
#define SHCRGL_CPARMS_SET_VM (1)
#define SHCRGL_CPARMS_SET_VISIBLE_REGION (1)
#define SHCRGL_CPARMS_WRITE      (1)
#define SHCRGL_CPARMS_READ       (2)
#define SHCRGL_CPARMS_WRITE_READ (3)
#define SHCRGL_CPARMS_SET_VERSION (2)
#define SHCRGL_CPARMS_SCREEN_CHANGED (1)
#define SHCRGL_CPARMS_DEV_RESIZE (1)
#define SHCRGL_CPARMS_INJECT (2)
#define SHCRGL_CPARMS_SET_PID (1)
#define SHCRGL_CPARMS_WRITE_BUFFER        (4)
#define SHCRGL_CPARMS_WRITE_READ_BUFFERED (3)
#define SHCRGL_CPARMS_SET_OUTPUT_REDIRECT (1)
#define SHCRGL_CPARMS_CRCMD_NOTIFY_CMDS (0)
#define SHCRGL_CPARMS_VIEWPORT_CHANGED (5)
#define SHCRGL_CPARMS_VIEWPORT_CHANGED2 (1)
#define SHCRGL_CPARMS_GET_CAPS_LEGACY (1)
#define SHCRGL_CPARMS_GET_CAPS_NEW (1)

#define VBOX_HGCM_SVC_PARM_INVALID (0U)
#define VBOX_HGCM_SVC_PARM_32BIT (1U)
#define VBOX_HGCM_SVC_PARM_64BIT (2U)
//#define VBOX_HGCM_SVC_PARM_PTR   (3U)
//#define VMMDevHGCMParmType_LinAddr      4

#ifdef IN_VM
#define VBOX_HGCM_SVC_PARM_PTR (4U)
#elif OUTSIDE_VM
#define VBOX_HGCM_SVC_PARM_PTR   (3U)
#endif

#define AssertCompile(expr) \
    extern int RTASSERTVAR[1] __attribute__((__unused__)), \
    RTASSERTVAR[(expr) ? 1 : 0] __attribute__((__unused__))
#define AssertCompileSize(type, size) \
    AssertCompile(sizeof(type) == (size))

struct POINTER
{
    uint32_t size;
    void* addr;
} __attribute__((packed));

union U
{
    uint32_t uint32;
    uint64_t uint64;
    POINTER pointer;
} __attribute__((packed));

struct VBOXHGCMSVCPARM
{
	/** VBOX_HGCM_SVC_PARM_* values. */
	uint32_t type;
    U u;

	// union
	// {
	// 	uint32_t uint32;
	// 	//uint64_t uint64;
	// 	POINTER pointer;
    //     //struct
	// 	// {
	// 	// 	uint32_t size;
	// 	// 	void *addr;
	// 	// } pointer;
	// } u;

} __attribute__((packed));


struct VBGLIOCHGCMCALL
{
    /** Common header. */
    VBGLREQHDR  Hdr;
    /** Input: The id of the caller. */
    uint32_t    u32ClientID;
    /** Input: Function number. */
    uint32_t    u32Function;
    /** Input: How long to wait (milliseconds) for completion before cancelling the
    * call.  This is ignored if not a VBGL_IOCTL_HGCM_CALL_TIMED or
    * VBGL_IOCTL_HGCM_CALL_TIMED_32 request. */
    uint32_t    cMsTimeout;
    /** Input: Whether a timed call is interruptible (ring-0 only).  This is ignored
    * if not a VBGL_IOCTL_HGCM_CALL_TIMED or VBGL_IOCTL_HGCM_CALL_TIMED_32
    * request, or if made from user land. */
    bool        fInterruptible;
    /** Explicit padding, MBZ. */
    uint8_t     bReserved;
    /** Input: How many parameters following this structure.
    *
    * The parameters are either HGCMFunctionParameter64 or HGCMFunctionParameter32,
    * depending on whether we're receiving a 64-bit or 32-bit request.
    *
    * The current maximum is 61 parameters (given a 1KB max request size,
    * and a 64-bit parameter size of 16 bytes).
    *
    * @note This information is duplicated by Hdr.cbIn, but it's currently too much
    *       work to eliminate this. */
    uint16_t    cParms;
    /* Parameters follow in form HGCMFunctionParameter aParms[cParms] */
};
//AssertCompileSize(VBGLIOCHGCMCALL, 24 + 16);

#endif 
