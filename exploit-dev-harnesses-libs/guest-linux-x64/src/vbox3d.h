#ifndef VBOX3D_H
#define VBOX3D_H
#include <stdint.h>

#include "hgcm.h"

// CR version
#define CR_PROTOCOL_VERSION_MAJOR 9
#define CR_PROTOCOL_VERSION_MINOR 1

namespace vbox3d {
    void init();
    void destroy();

	/// main
	uint32_t connect();
	void disconnect(uint32_t u32ClientId);
	int hgcm_call(uint32_t u32ClientId, uint32_t u32Function, uint32_t cParms, VBOXHGCMSVCPARM paParms[]);


    /// helpers
    VBGLREQHDR ioctl_header(uint32_t u32InSize, uint32_t u32OutSize);


    /// function wrappers
	// SHCRGL_GUEST_FN_WRITE
	int hgcm_write(uint32_t u32ClientId, uint8_t* pBuffer, uint32_t cbBuffer);
	
	// SHCRGL_GUEST_FN_READ
	int hgcm_read(uint32_t u32ClientId, uint8_t* pBuffer, uint32_t cbBuffer);

	// SHCRGL_GUEST_FN_WRITE_BUFFER
	uint32_t hgcm_write_buffer_create(uint32_t u32ClientId, uint32_t cbBufferSize, uint8_t* pBuffer, uint32_t cbBuffer);
	uint32_t hgcm_write_buffer_modify(uint32_t u32ClientId, uint32_t iBuffer, uint32_t ui32Offset,
		uint32_t cbBufferSize, uint8_t* pBuffer, uint32_t cbBuffer);
	
	// SHCRGL_GUEST_FN_WRITE_READ_BUFFERED
	uint32_t hgcm_read_buffered(uint32_t u32ClientId, uint32_t iBuffer, uint8_t* pWriteback, uint32_t cbWriteback);

    // SHCRGL_GUEST_FN_SET_VERSION
	int hgcm_set_version(uint32_t u32ClientId);

	// SHCRGL_GUEST_FN_SET_PID
	int hgcm_set_pid(uint32_t u32ClientId, int64_t pid);

	/// helpers
	bool svcbuffer_exists(uint32_t u32ClientId, uint32_t iBuffer, uint32_t cbBufferSize);
}


#endif