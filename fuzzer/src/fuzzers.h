/*

*/
#include <cstring>

void fuzzer_standard() {
    // this just does nothing, since we are taking the exact payload
    // from AFL and sending that as the message
}

#define DISPLAY_NAME_LEN 256
#define CR_CREATECONTEXT_EXTEND_OPCODE 48
const char dpyName[DISPLAY_NAME_LEN] = "hello\0";

void fuzzer_standard_create_context() {
    // this does not do anything with the input, but creates a context
    // for the current client
    // without a context you just get a bunch of nullpointer dereferences
 
    uint32_t crUnpackExtendCreateContextMsg[280];
    crUnpackExtendCreateContextMsg[0] = CR_MESSAGE_OPCODES;
    crUnpackExtendCreateContextMsg[1] = 0x00;
    crUnpackExtendCreateContextMsg[2] = 0x01;
    crUnpackExtendCreateContextMsg[3] = static_cast<uint32_t>(CR_EXTEND_OPCODE << 24);
    crUnpackExtendCreateContextMsg[4] = 0x00;
    crUnpackExtendCreateContextMsg[5] = CR_CREATECONTEXT_EXTEND_OPCODE;

    // dpyName
    memcpy((void*)&crUnpackExtendCreateContextMsg[6], (void*)dpyName, DISPLAY_NAME_LEN);
    
    // visbits
    crUnpackExtendCreateContextMsg[6 + DISPLAY_NAME_LEN] = 0x25;

    // sharectx
    crUnpackExtendCreateContextMsg[6 + DISPLAY_NAME_LEN + 1] = 0x00;

    crVBoxServerClientWrite(PREDEFINED_CLIENT_ID, (uint8_t*)crUnpackExtendCreateContextMsg, sizeof(crUnpackExtendCreateContextMsg));
}

void fuzzer_extended_opcodes() {
    // get payload
    uint32_t* crMessage = (uint32_t*)g_pBuffer;

    // add CR_EXTEND_OPCODE opcode
    crMessage[3] = CR_EXTEND_OPCODE << 24;
    
    // limit to 303 (0x12f)
    crMessage[5] = crMessage[5] % 0x12f;
}
