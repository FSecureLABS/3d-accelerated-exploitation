

#include "harness.h"
#include "vbox.h"
#include "fuzzers.h"

void init();
void read_payload(char* filename);
void destroy();

int main(int argc, char** argv) {

    LOG_INFO("RUNNING DEBUG BUILD");
    init();

#ifdef DEBUG
    uint32_t cbBuffer = sizeof(crUnpackExtendWritebackMsg);

    // send sample message
    LOG_INFO("writing crUnpackExtendWriteback message");
    crVBoxServerClientWrite(PREDEFINED_CLIENT_ID, (uint8_t*)crUnpackExtendWritebackMsg, cbBuffer);

    for (int i = 0; i < cbBuffer/4; i++) {
        printf("\t0x%08x\n", crUnpackExtendWritebackMsg[i]);
    }

    LOG_INFO("reading crUnpackExtendWriteback response");
    crVBoxServerClientRead(PREDEFINED_CLIENT_ID, (uint8_t*)crUnpackExtendWritebackMsg, &cbBuffer);

    for (int i = 0; i < cbBuffer/4; i++) {
        printf("\t0x%08x\n", crUnpackExtendWritebackMsg[i]);
    }

    // cleanup
    destroy();
    return 0;
#endif

    // check that we have been given a payload file
    if (argc < 2) {
        destroy();
        return -1;
    }

    // read payload file
    read_payload(argv[1]);

    // minimum payload size: 0x20
    if (g_cbBuffer < 0x20) {
        destroy();
        return -1;
    }

#ifdef FUZZER_EXTENDED_OPCODES
    fuzzer_standard_create_context();
    fuzzer_extended_opcodes();
#endif

    // everything's ready. Send the message
    crVBoxServerClientWrite(PREDEFINED_CLIENT_ID, g_pBuffer, g_cbBuffer);

    // cleanup
    destroy();
    return 0;
}

void init() {
    uint32_t clientId = PREDEFINED_CLIENT_ID;
    int32_t rc = -1;

    LOG_INFO("initialising chromium server");
    bool bStatus = crVBoxServerInit();

#ifdef DEBUG
    if (!bStatus) {
        LOG_ERROR("\tfailed to start chromium server");
        exit(-1);
    }
    else {
        LOG_SUCCESS("server initialised");
    }
#endif

    LOG_INFO("adding new client");
    rc = crVBoxServerAddClient(clientId);

#ifdef DEBUG
    if (rc != 0) {
        LOG_ERROR("failed to add client");
        exit(-1);
    }
    else {
        LOG_SUCCESS("client added");
    }
#endif

    LOG_INFO("setting client version");
    rc = crVBoxServerClientSetVersion(clientId, CR_PROTOCOL_VERSION_MAJOR, CR_PROTOCOL_VERSION_MINOR);

#ifdef DEBUG
    if (rc != 0) {
        LOG_ERROR("failed to set client version");
        exit(-1);
    }
    else {
        LOG_SUCCESS("version set");
    }
#endif
}

void read_payload(char* filename) {
    FILE *f = fopen(filename, "rb");

    // get size
    fseek(f, 0, SEEK_END);
    g_cbBuffer = ftell(f);
    fseek(f, 0, SEEK_SET);

    // has to be multiple of 4
    //if (g_cbBuffer % 4 != 0) {
    //    exit(-1);
    //}

    // allocate memory
    g_pBuffer = (uint8_t*)malloc(g_cbBuffer);
    g_rpBuffer = (uint8_t*)malloc(g_cbBuffer);

    // read everything from the file
    fread(g_pBuffer, g_cbBuffer, 1, f);

    // close file
    fclose(f);

    // apply baseline transformation
    uint32_t* crMessage = (uint32_t*)g_pBuffer;
    // set message type
    crMessage[0] = CR_MESSAGE_OPCODES;
    // set number of opcodes to 1
    crMessage[2] = 0x1;
}

void destroy() {
    LOG_INFO("disconnecting client");
    crVBoxServerRemoveClient(PREDEFINED_CLIENT_ID);

    LOG_INFO("tearing down server");
    crVBoxServerTearDown();

    if (g_pBuffer != NULL) {
        free(g_pBuffer);
    }
}